import urllib

def NormalizeURL(url):
	return url

def MetadataObjectForURL(url):
	if True:
		html = HTML.ElementFromURL(url)
		
		station = html.xpath('//a[@class="mail sprite-interface sprite-mail"]//@href')[0].split('(diffus')[1].split('sur ')[1].split(')')[0]
	
		show = html.xpath('//span[@itemprop="name"]//text()')[0]
		try: 
			title = html.xpath('//div[@class="soustitre"]//text()')[0]
		except:
			title = show
			show = ''
		
		try: summary = html.xpath('//span[@class="prefix" and contains(text(), "pisode")]//..//text()')[1].strip()
		except:
			try:
				summary = html.xpath('//span[@class="prefix" and contains(text(), "mission")]//..//text()')[1].strip()
			except:
				try: summary = html.xpath('//span[@class="prefix" and contains(text(), "Le programme")]//..//text()')[1].strip()
				except: summary = ''
		
		
		thumb = html.xpath('//meta[@itemprop="thumbnailUrl"]//@content')[0].replace('/200/','/480/')
		
		try: season = int(html.xpath('//span[@itemprop="season"]//span[@itemprop="name"]//text()')[0][1:])
		except: season = 0
		
		try: episode = int(html.xpath('//span[@itemprop="episode"]//span[@itemprop="name"]//text()')[0][1:])
		except: episode = 0
	else:
		raise Ex.MediaGeoblocked
		
	
	return EpisodeObject(
		show = show,
		title = title,
		summary = summary,
		thumb = Resource.ContentsOfURLWithFallback(thumb),
		season = season,
		index = episode,
		source_title = station
	)
	
@deferred
def MediaObjectsForURL(url):
	channel_id = url.rsplit('/',1)[1]
	json = JSON.ObjectFromURL('http://webservices.francetelevisions.fr/catchup/flux/message_FT.json')
	
	channels = {c['nom']: c['video_ipad'] for c in json['configuration']['directs']}

	if not channel_id in channels.keys():
		raise Ex.MediaNotAvailable
		
	video_url = channels[channel_id]
	
	if urllib.urlopen(video_url).getcode() == 403:
		raise Ex.MediaGeoblocked
		
	return [
		MediaObject(
			parts = [
				PartObject(
					key = HTTPLiveStreamURL(Callback(PlayVideo, url=channels[channel_id]))
				)
			],
			video_resolution = '576',
			audio_channels = 2,
			optimized_for_streaming = True
		)
	]
	
@indirect
def PlayVideo(url):
		return IndirectResponse(VideoClipObject, key=HTTPLiveStreamURL(url))